# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0


    - name: Assemble with Gradle Wrapper
      run: |
          cd vulnerable-web-app
          ./gradlew assemble

    - name: Test with Gradle Wrapper
      run: |
        cd vulnerable-web-app
        ./gradlew test

    - name: Publish Test Report
      if: always()                                    # Forces this step to always run
      continue-on-error: true
      uses: mikepenz/action-junit-report@v4
      with:
        report_paths: 'vulnerable-web-app/build/test-results/test/TEST-*.xml'
        fail_on_failure: false
        require_tests: false
        include_passed: true


#    - name: Upload JAR Artefact
#      uses: actions/upload-artifact@v4
#      with:
#        name: jar-file
#        path: ./vulnerable-web-app/build/libs/vulnerable-web-app-1.0-SNAPSHOT.jar
#
#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#
#    - name: Download JAR Artefact
#      uses: actions/download-artifact@v4
#      with:
#        name: jar-file

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.CRABPEM }}

    - name: Copy JAR file to EC2
      run: |
        scp -o StrictHostKeyChecking=no ./vulnerable-web-app/build/libs/vulnerable-web-app-1.0-SNAPSHOT.jar ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }}:/home/${{ secrets.AWS_USER }}/vulnerable-web-app.jar

    - name: Kill previous web app processes
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} 'pkill -9 -f *vulnerable-web-app* || echo "No process to kill"'

    - name: Start Java Application
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} 'nohup java -jar /home/${{ secrets.AWS_USER }}/vulnerable-web-app.jar > /dev/null 2>&1 &'